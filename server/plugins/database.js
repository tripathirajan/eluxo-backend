const mongoose = require('mongoose');
const { dbConfig } = require('../../config').appConfig;
const { consoleLogger, logger } = require('../../services/logger');
const AppError = require('../../errors/AppError');
const errorRegistry = require('../../errors/errorRegistry');

let isConnected = false;

/**
 * Get the MongoDB connection URI.
 * This function constructs the URI from the database configuration.
 * If the URI is already set, it returns that.
 * If any required configuration is missing, it throws an error.
 * @returns {string} MongoDB connection URI
 * @throws {AppError} If the database configuration is incomplete
 */
const getDbURI = () => {
  const { uri: dbURI } = dbConfig;
  // If dbURI is provided, use it directly
  if (!dbURI || typeof dbURI !== 'string') {
    throw new AppError(
      'Missing or invalid DB_URI in environment',
      500,
      errorRegistry.GENERAL.DB_URI_INVALID
    );
  }
  if (!dbURI.startsWith('mongodb://') && !dbURI.startsWith('mongodb+srv://')) {
    throw new AppError(
      'Invalid dbURI format, must start with "mongodb://" or "mongodb+srv://"',
      400,
      errorRegistry.GENERAL.DB_URI_FORMAT_INVALID
    );
  }
  return dbURI;
};

/**
 * Connect to MongoDB using Mongoose.
 * This function establishes a connection to the MongoDB database.
 * It uses the connection URI generated by getDbURI.
 * If the connection is already established, it does nothing.
 * It also sets up a listener for the SIGINT signal to close the connection gracefully.
 * @returns {Promise<void>} Resolves when the connection is established
 * @throws {AppError} If the connection fails
 */
async function connectToMongo() {
  const uri = getDbURI();
  if (!uri)
    throw new AppError(
      'Missing MONGODB_URI in environment',
      500,
      errorRegistry.GENERAL.DB_URI_INVALID
    );

  if (isConnected) return;

  try {
    await mongoose.connect(uri);

    isConnected = true;
    consoleLogger.showInfo('✅ DB connection established');
  } catch (err) {
    consoleLogger.showError('❌ DB connection error');
    logger.error('DB connection failed', {
      error: err.message,
      stack: err.stack,
    });
    /* eslint-disable no-process-exit */
    process.exit(1);
  }
}

function getMongoose() {
  if (!isConnected) {
    throw new AppError(
      'DB not connected. Call connectToMongo() first.',
      500,
      errorRegistry.GENERAL.DB_NOT_CONNECTED
    );
  }
  return mongoose;
}

module.exports = {
  connectToMongo,
  getMongoose,
  closeConnection: async () => {
    if (isConnected) {
      await mongoose.connection.close();
      isConnected = false;
      logger.showMsg('🔌 MongoDB connection closed');
    } else {
      logger.showMsg('🔌 No active MongoDB connection to close');
    }
  },
};
