const mongoose = require('mongoose');
const logger = require('../../services/logger');
const getConfig = require('../../config/env');

let isConnected = false;

const { database: dbConfig } = getConfig();

const { name, host, usr, pwd, port, uri: dbURI } = dbConfig || {};

/**
 * Get the MongoDB connection URI.
 * This function constructs the URI from the database configuration.
 * If the URI is already set, it returns that.
 * If any required configuration is missing, it throws an error.
 * @returns {string} MongoDB connection URI
 * @throws {Error} If the database configuration is incomplete
 */
const getDbURI = () => {
  // If dbURI is provided, use it directly
  if (dbURI && typeof dbURI === 'string') {
    if (
      !dbURI.startsWith('mongodb://') &&
      !dbURI.startsWith('mongodb+srv://')
    ) {
      logger.warn('dbURI should start with mongodb:// or mongodb+srv://');
      throw new Error('Invalid dbURI format');
    }
    return dbURI;
  }

  if (!name || !host || !port || !usr || !pwd) {
    logger.error(
      'Database configuration is incomplete. Please check your environment variables.',
      { ...dbConfig }
    );
    throw new Error('Incomplete database configuration');
  }
  return `mongodb://${usr}:${pwd}@${host}:${port}/${name}`;
};

/**
 * Connect to MongoDB using Mongoose.
 * This function establishes a connection to the MongoDB database.
 * It uses the connection URI generated by getDbURI.
 * If the connection is already established, it does nothing.
 * It also sets up a listener for the SIGINT signal to close the connection gracefully.
 * @returns {Promise<void>} Resolves when the connection is established
 * @throws {Error} If the connection fails
 */
async function connectToMongo() {
  const uri = getDbURI();
  if (!uri) throw new Error('Missing MONGODB_URI in environment');

  if (isConnected) return;

  try {
    await mongoose.connect(uri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    isConnected = true;
    logger.info('‚úÖ Connected to MongoDB via Mongoose');

    process.on('SIGINT', async () => {
      await mongoose.connection.close();
      logger.info('üîå MongoDB connection closed due to SIGINT');
      /* eslint-disable no-process-exit */
      process.exit(0);
    });
  } catch (err) {
    logger.error('‚ùå MongoDB connection error', {
      error: err.message,
      stack: err.stack,
    });
    /* eslint-disable no-process-exit */
    process.exit(1);
  }
}

function getMongoose() {
  if (!isConnected) {
    throw new Error('Mongoose not connected. Call connectToMongo() first.');
  }
  return mongoose;
}

module.exports = {
  connectToMongo,
  getMongoose,
};
